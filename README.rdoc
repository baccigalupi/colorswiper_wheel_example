$ git clone git://github.com/baccigalupi/wheel.js.git

$ rails new colorswiper -T -O
$ cd colorswiper/

$ git rm public/index.html
rm 'public/index.html'


$ rails g controller colors
      create  app/controllers/colors_controller.rb
      invoke  erb
      create    app/views/colors
      invoke  helper
      create    app/helpers/colors_helper.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/colors.js.coffee
      invoke    scss
      create      app/assets/stylesheets/colors.css.scss

$ touch app/views/colors/index.html.erb

$ cp -r ../wheel.js/lib/wheel/ vendor/assets/javascripts/wheel/

add wheel manifest into application.js (and a blank app.js which is required by wheel), so wheel is included in my index page (and any other page in this rails app)

in app/assets/javascripts/application.js, remove jquery and other defaults, only require the wheel base "manifest" 
-//= require jquery
-//= require jquery_ujs
-//= require_tree .
+//= require wheel/manifests/base

Create a new file called "app.js" -- this is where the JS goes to set up the app (this is required by wheel)

I want to make a single object on the page (for now), I will call it a "patch" -- in my app this will represent a specific color that I pick by tapping and swiping (maybe later there can be more of these in this exciting color picking app)
   I will to add three things to define my "patch" (code below)
	- a template, which will determine the structure of the HTML
	- a css file, which will determine the default colors, fonts, layout, etc.
	- a javascript file, which will contain the behavior

Then I "build" an instance of a Patch in the app.js file, after setting up minimal wheel app stuff

---- app/assets/javascripts/app.js ----

// Require all the js files that define your application logic
//= require ./patch

$(document).ready(function() {
  // We don't need a full app object with all the extras for this app ...
  // so we are going to fake it out. The main thing we need is the templates
  window.app = {
    templates: Wheel.Templates.build(),
    eventManager: (Modernizr.touch ? Wheel.TouchManager : Wheel.MouseManager).build()
  };
  window.app.templates.gather(); // get them from the DOM
  // now the templates are available to all the views

  // Here we are building a single view, and giving it a parent DOM element.
  // That means that it will automatically append the view to that dom element. Yay!
  var view = Patch.build({parent: $(document.body), color_text: 'color'});
});


-- app/views/colors/index.html.erb, I added the template below  ** does the template really belong in my index file?
<script class='template' type="text/html" name='Patch'>
  <div class='patch'>
    <div class='color_text'>{{color_text}}</div>
  </div>
</script>


-- app/assets/stylesheets/patch.css.scss 
.patch {
  width: 200px;
  height: 275px;
  background-color: #aaf;
  margin: 10px;

  .color_text {
    height: 100px;
    width: 100px;
    font-size: 24px;
    line-height: 24px;
    margin: 0 auto;
    text-align: center;
    margin-top: 20px;
  }
}

-- app/assets/javascripts/patch.js
Wheel.View.subclass('Patch');






